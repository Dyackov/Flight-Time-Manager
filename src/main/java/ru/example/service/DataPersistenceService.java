package ru.example.service;

import java.io.File;
import java.io.IOException;

/**
 * Сервис для работы с файловым хранилищем данных.
 * <p>
 * Этот интерфейс определяет методы для чтения данных из файлов и записи данных в файлы.
 * Он предоставляет универсальные методы для работы с объектами различных типов, используя
 * типизацию через дженерики.
 * </p>
 */
public interface DataPersistenceService {

    /**
     * Читает данные из файла и преобразует их в объект заданного типа.
     * <p>
     * Метод читает содержимое указанного файла и десериализует его в объект указанного типа.
     * В случае ошибок при чтении или десериализации будет выброшено исключение {@link IOException}.
     * </p>
     *
     * @param file Файл, из которого будут прочитаны данные.
     * @param valueType Класс, в объект которого будут преобразованы данные.
     * @param <T> Тип объекта, в который будут преобразованы данные.
     * @return Объект типа {@code T}, полученный из данных в файле.
     * @throws IOException Если произошла ошибка при чтении файла или десериализации данных.
     */
    <T> T readFile(File file, Class<T> valueType) throws IOException;

    /**
     * Записывает данные в файл.
     * <p>
     * Метод сериализует переданные данные в указанный файл.
     * В случае ошибок при записи будет выброшено исключение {@link IOException}.
     * </p>
     *
     * @param file Файл, в который будут записаны данные.
     * @param data Данные, которые необходимо записать в файл.
     * @param <T> Тип данных, которые будут записаны в файл.
     * @throws IOException Если произошла ошибка при записи данных в файл.
     */
    <T> void writeFile(File file, T data) throws IOException;
}
